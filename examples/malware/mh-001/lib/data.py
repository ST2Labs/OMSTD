# -*- coding: utf-8 -*-

"""
Project name: Open Methodology for Security Tool Developers
Project URL: https://github.com/cr0hn/OMSTD

Copyright (c) 2014, cr0hn<-AT->cr0hn.com
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""


__author__ = 'cr0hn - cr0hn<-at->cr0hn.com (@ggdaniel)'

from os import listdir
from os.path import exists, isfile, basename, join, split, abspath


# --------------------------------------------------------------------------
class Parameters:
    """Program parameters"""

    # ----------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param sample_path: string to binary path 
        :type sample_path: str
        
        :param verbosity: Verbosity level
        :type verbosity: int

        :param output_file: string with output file path
        :type output_file: str
        """
        self.sample_path = kwargs.get("sample_path", None)
        self.verbosity = kwargs.get("verbosity", 0)
        self.output_file = kwargs.get("output_file", None)
        self.rules_path = kwargs.get("rules_path", None)

        if not isinstance(self.sample_path, str):
            raise TypeError("Expected str, got '%s' instead" % type(self.sample_path))

        # Checks file format
        if not exists(self.sample_path):
            raise ValueError("%s not exist" % self.sample_path)
        elif not isfile(self.sample_path):
            raise ValueError("%s is not a file" % self.sample_path)

        # Get sample file name only
        self.sample_file_name = basename(self.sample_path)

        # Generates output file name, if needed
        if self.output_file is None:
            from time import time

            tmp_output_path = split(self.sample_path)[0]
            tmp_output_file_name = "analyzed_%s" % int(time())

            self.output_file = abspath(join(tmp_output_path, tmp_output_file_name))

        # Set rules path, if needed
        if self.rules_path is None:
            from os import getcwd

            # Get .yara files from .rules/
            tmp_rules_path = join(getcwd(), "rules")
        else:
            tmp_rules_path = self.rules_path

            if exists(tmp_rules_path):
                raise FileNotFoundError("Rules path not found")

        # Load Yara rules
        self.yara_rules_files = {"%s" % y: abspath(join(tmp_rules_path, x)) for y, x in enumerate(listdir(tmp_rules_path)) if x.endswith("yara")}

        # Rules availables?
        if not self.yara_rules_files:
            raise FileNotFoundError("Not found rules in '%s'" % tmp_rules_path)


# --------------------------------------------------------------------------
class Results:
    """
    Output program parameters
    """

    # ----------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param rule: Matching rule name
        :type rule: str

        :param matches: Boolean that indicates if matches with any rule or not.
        :type matches: bool

        :param payload: Payload of detection (if malware detected) as format: list(tuple(...)) 
        :type payload: list

        :param description: Any additional info for match.
        :type description: str
        
        :param namespace: Name space that referer to an individual file. 
        :type namespace: int
        
        """
        self.rule = kwargs.get("rule")
        self.matches = kwargs.get("matches")
        self.payload = kwargs.get("payload")
        self.description = kwargs.get("description")
        self.namespace = kwargs.get("namespace")

        # Check types
        if not isinstance(self.rule, str):
            raise TypeError("Expected str, got '%s' instead" % type(self.rule))
        if not isinstance(self.matches, bool):
            raise TypeError("Expected bool, got '%s' instead" % type(self.matches))
        if not isinstance(self.payload, str):
            raise TypeError("Expected str, got '%s' instead" % type(self.payload))
        if not isinstance(self.description, str):
            raise TypeError("Expected str, got '%s' instead" % type(self.description))
        if not isinstance(self.namespace, int):
            raise TypeError("Expected int, got '%s' instead" % type(self.namespace))



__all__ = ["Results", "Parameters"]